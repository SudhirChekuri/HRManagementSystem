//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MvcProject
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class HRManagementEntities : DbContext
    {
        public HRManagementEntities()
            : base("name=HRManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Tbl_Attendance> Tbl_Attendance { get; set; }
        public DbSet<Tbl_HR> Tbl_HR { get; set; }
        public DbSet<Tbl_Leaves> Tbl_Leaves { get; set; }
        public DbSet<Tbl_Manager> Tbl_Manager { get; set; }
        public DbSet<Tbl_Payslips> Tbl_Payslips { get; set; }
        public DbSet<tbl_Register> tbl_Register { get; set; }
    
        public virtual int spAttendance(Nullable<int> id, Nullable<int> mId, string sickleaves, string privilegeLeaves, string fromdate, string todate, ObjectParameter aId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var mIdParameter = mId.HasValue ?
                new ObjectParameter("MId", mId) :
                new ObjectParameter("MId", typeof(int));
    
            var sickleavesParameter = sickleaves != null ?
                new ObjectParameter("Sickleaves", sickleaves) :
                new ObjectParameter("Sickleaves", typeof(string));
    
            var privilegeLeavesParameter = privilegeLeaves != null ?
                new ObjectParameter("PrivilegeLeaves", privilegeLeaves) :
                new ObjectParameter("PrivilegeLeaves", typeof(string));
    
            var fromdateParameter = fromdate != null ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(string));
    
            var todateParameter = todate != null ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAttendance", idParameter, mIdParameter, sickleavesParameter, privilegeLeavesParameter, fromdateParameter, todateParameter, aId);
        }
    
        public virtual int spEmployeedetails(string userName, string emailId, string password, Nullable<System.DateTime> createdTime, Nullable<int> mId, ObjectParameter id)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var mIdParameter = mId.HasValue ?
                new ObjectParameter("MId", mId) :
                new ObjectParameter("MId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmployeedetails", userNameParameter, emailIdParameter, passwordParameter, createdTimeParameter, mIdParameter, id);
        }
    
        public virtual int spHRdetails(string userName, string password, string emailId, Nullable<System.DateTime> createdTime, ObjectParameter id)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spHRdetails", userNameParameter, passwordParameter, emailIdParameter, createdTimeParameter, id);
        }
    
        public virtual int spleaves(Nullable<int> mId, Nullable<int> id, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string comments, string status, ObjectParameter lId)
        {
            var mIdParameter = mId.HasValue ?
                new ObjectParameter("MId", mId) :
                new ObjectParameter("MId", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spleaves", mIdParameter, idParameter, fromDateParameter, toDateParameter, commentsParameter, statusParameter, lId);
        }
    
        public virtual int spManagerdetails(string userName, string password, string emailId, Nullable<System.DateTime> createdTime, ObjectParameter id)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spManagerdetails", userNameParameter, passwordParameter, emailIdParameter, createdTimeParameter, id);
        }
    
        public virtual int spPayslips(Nullable<int> id, Nullable<int> mId, string year, string month, string pdf, ObjectParameter pId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var mIdParameter = mId.HasValue ?
                new ObjectParameter("MId", mId) :
                new ObjectParameter("MId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var pdfParameter = pdf != null ?
                new ObjectParameter("Pdf", pdf) :
                new ObjectParameter("Pdf", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPayslips", idParameter, mIdParameter, yearParameter, monthParameter, pdfParameter, pId);
        }
    }
}
